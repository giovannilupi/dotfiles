# -----------------------------------------------------------
# Settings
# -----------------------------------------------------------

# Basic settings
set previewer ~/.config/lf/preview
set sixel true
#set preview true
set icons true
set hidden true
set ignorecase true
set autoquit true
set mouse true
set scrolloff 10
set cursorpreviewfmt "\033[7;2m"
set errorfmt "\033[37;48;5;88m%s\033[0m"
set drawbox true
# Shell settings
set shell /bin/dash
set shellopts '-eu'
set ifs "\n"
set filesep "\n"  # default already

# -----------------------------------------------------------
# Command definitions
# -----------------------------------------------------------

# The prefix shows what kind of command it is
#   $: runs as shell command
#   %: runs as piped shell command (stdout => statusline)
#   !: runs as interactive shell command (puts lf in the bg)
#   :: runs as lf command

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb "$f") in
        text/* | inode/x-empty) lf -remote "send $id \$$EDITOR \$fx";;
        */pdf) zathura $f >/dev/null 2>&1;;
        *) for file in $fx; do $OPENER "$file" >/dev/null 2>&1 & done;;
    esac
    lf -remote 'send unselect'
}}

# Create new directories
# If a directory already exists, it will not be overwritten
cmd newdir %{{
    printf "Enter new directory name(s): "
    read -r dirnames
    if [ -z "$dirnames" ]; then printf "\033[37;48;5;88m[1] no directory name provided\033[0m\n"; return; fi
    failed_items=""
    failed_cnt=0
    # Use eval to split $dirnames into words, respecting escaped spaces
    # This introduces a security risk, but there is no other easy way to split a string into words in POSIX due to lack of arrays
    # As an alternative, you may choose to set IFS=' ' and not handle escaped spaces
    eval "set -- $dirnames"
    for dirname in "$@"; do
        if ! mkdir -p "$dirname" >/dev/null 2>&1; then
            failed_cnt=$((failed_cnt+1))
            if [ -z "$failed_items" ]; then
                failed_items=$dirname
            else
                failed_items="$failed_items, $dirname"
            fi
        fi
    done
    if [ $failed_cnt = 0 ]; then
        printf "\033[32mCreated all directories\033[0m\n"
    else
        printf "\033[37;48;5;88m[%d] some directories could not be created - %s\033[0m\n" "$failed_cnt" "$failed_items"
    fi
}}

# Create new files
# If a file already exists, it will not be overwritten
cmd newfile %{{
    printf "Enter new file name(s): "
    read -r files
    if [ -z "$files" ]; then printf "\033[37;48;5;88m[1] no file name provided\033[0m\n"; return; fi
    failed_items=""
    failed_cnt=0
    # Use eval to split $files into words, respecting escaped spaces
    # This introduces a security risk, but there is no other easy way to split a string into words in POSIX due to lack of arrays
    # As an alternative, you may choose to set IFS=' ' and not handle escaped spaces
    eval "set -- $files"
    for file in "$@"; do
        if ! touch "$file" >/dev/null 2>&1; then
            failed_cnt=$((failed_cnt+1))
            if [ -z "$failed_items" ]; then
                failed_items=$file
            else
                failed_items="$failed_items, $file"
            fi
        fi
    done
    if [ $failed_cnt = 0 ]; then
        printf "\033[32mCreated all files\033[0m\n"
    else
        printf "\033[37;48;5;88m[%d] some files could not be created - %s\033[0m\n" "$failed_cnt" "$failed_items"
    fi
}}

# Download files with wget
cmd download %{{
    printf "Enter download link(s): "
    read -r links
    if [ -z "$links" ]; then printf "\033[37;48;5;88m[1] no links provided\033[0m\n"; return; fi
    printf "Downloading...\n"
    failed_cnt=0
    IFS=' '
    for link in $links; do
        if ! wget "$link" >/dev/null 2>&1; then failed_cnt=$((failed_cnt+1)); fi
    done
    if [ $failed_cnt = 0 ]; then
        printf "\033[32mDownloaded all files\033[0m\n"
    else
        printf "\033[37;48;5;88m[%d] some items could not be downloaded\033[0m\n" "$failed_cnt"
    fi
}}

# Copies the specified files in the current directory, does not overwrite existing files
cmd copyhere %{{
    printf "Enter file(s) to copy: "
    read -r files
    if [ -z "$files" ]; then printf "\033[37;48;5;88m[1] no file name provided\033[0m\n"; return; fi
    printf "Copying...\n"
    failed_items=""
    failed_cnt=0
    # Use eval to split $files into words, respecting escaped spaces
    # This introduces a security risk, but there is no other easy way to split a string into words in POSIX due to lack of arrays
    # As an alternative, you may choose to set IFS=' ' and not handle escaped spaces
    eval "set -- $files"
    for file in "$@"; do
        if ! cp -n -R "$file" . >/dev/null 2>&1; then
            failed_cnt=$((failed_cnt+1))
            if [ -z "$failed_items" ]; then
                failed_items="$(basename "$file")"
            else
                failed_items="$failed_items, $(basename "$file")"
            fi
        fi
    done
    if [ $failed_cnt = 0 ]; then
        printf "\033[32mCopied all items\033[0m\n"
    else
        printf "\033[37;48;5;88m[%d] some items could not be copied - %s\033[0m\n" "$failed_cnt" "$failed_items"
    fi
}}

# Moves the specified files in the current directory, does not overwrite existing files
# Notice that, unlike coopyhere, this does not display an error if the destination already exists
cmd movehere %{{
    printf "Enter file(s) to move: "
    read -r files
    if [ -z "$files" ]; then printf "\033[37;48;5;88m[1] no file name provided\033[0m\n"; return; fi
    printf "Moving...\n"
    failed_items=""
    failed_cnt=0
    # Use eval to split $files into words, respecting escaped spaces
    # This introduces a security risk, but there is no other easy way to split a string into words in POSIX due to lack of arrays
    # As an alternative, you may choose to set IFS=' ' and not handle escaped spaces
    eval "set -- $files"
    for file in "$@"; do
        if ! mv -n "$file" . >/dev/null 2>&1; then
            failed_cnt=$((failed_cnt+1))
            if [ -z "$failed_items" ]; then
                failed_items="$(basename "$file")"
            else
                failed_items="$failed_items, $(basename "$file")"
            fi
        fi
    done
    if [ $failed_cnt = 0 ]; then
        printf "\033[32mMoved all items\033[0m\n"
    else
        printf "\033[37;48;5;88m[%d] some items could not be moved - %s\033[0m\n" "$failed_cnt" "$failed_items"
    fi
}}

# Clone git repository from given link to current directory
cmd clone %{{
    printf "Enter link to clone: "
    read ans
    if [ -z "$ans" ]; then printf "\033[37;48;5;88m[1] no link provided\033[0m\n"; return; fi
    printf "Cloning repository...\n"
    if ! error_msg="$(git clone "$ans" 2>&1)"; then
        printf "\033[37;48;5;88m[1] failed to clone repository - %s\033[0m\n" "$(echo "$error_msg" | awk -F ': ' '{print tolower($NF)}')"
    else
        printf "\033[32mRepository cloned\033[0m\n"
    fi
}}

# Trash command with confirmation
cmd trash %{{
    printf "Move all selected items to trash? [y/n]: "
    read ans
    case "$ans" in
        [Yy]*)
            printf "Moving files to trash...\n"
            failed_items=""
            failed_cnt=0
            for file in $fx; do
                if ! gio trash "$file" >/dev/null 2>&1; then
                    failed_cnt=$((failed_cnt+1))
                    if [ -z "$failed_items" ]; then
                        failed_items="$(basename "$file")"
                    else
                        failed_items="$failed_items, $(basename "$file")"
                    fi
                fi
            done
            lf -remote 'send unselect'
            if [ $failed_cnt = 0 ]; then
               printf "\033[32mMoved all items to trash\033[0m\n"
            else
                printf "\033[37;48;5;88m[%d] some items could not be trashed - %s\033[0m\n" "$failed_cnt" "$failed_items"
            fi
            ;;
        [Nn]*) printf "\033[37;48;5;88m[1] operation aborted\033[0m\n" ;;
        *) printf "\033[37;48;5;88m[1] invalid user response\033[0m\n" ;;
    esac
}}

# Delete command with confirmation
cmd delete %{{
    printf "Delete all selected items? [y/n]: "
    read ans
    case "$ans" in
        [Yy]*)
            printf "Deleting files...\n"
            failed_items=""
            failed_cnt=0
            for file in $fx; do
                if ! rm -rf "$file" >/dev/null 2>&1; then
                    failed_cnt=$((failed_cnt+1))
                    if [ -z "$failed_items" ]; then
                        failed_items="$(basename "$file")"
                    else
                        failed_items="$failed_items, $(basename "$file")"
                    fi
                fi
            done
            lf -remote 'send unselect'
            if [ $failed_cnt = 0 ]; then
               printf "\033[32mDeleted all selected items\033[0m\n"
            else
                printf "\033[37;48;5;88m[%d] some items could not be deleted - %s\033[0m\n" "$failed_cnt" "$failed_items"
            fi
            ;;
        [Nn]*) printf "\033[37;48;5;88m[1] operation aborted\033[0m\n" ;;
        *) printf "\033[37;48;5;88m[1] invalid user response\033[0m\n" ;;
    esac
}}

# Rename file or directory
cmd rename %{{
    printf "Enter new name: "
    read ans
    if [ -z "$ans" ]; then
        printf "\033[37;48;5;88m[1] new name cannot be empty\033[0m\n"
        return
    fi
    # Check if the new filename contains a directory separator
    if echo "$ans" | grep -q "/"; then
        printf "\033[37;48;5;88m[1] new name contains a directory separator\033[0m\n"
        return
    fi
    # Check if a file with the same name already exists
    # This avoids the possibility of moving a file to a directory in the same path
    if [ -e "$ans" ]; then
        if [ -L "$ans" ]; then anstype="symlink"; elif [ -d "$ans" ]; then anstype="directory"; else anstype="file"; fi
        printf "\033[37;48;5;88m[1] a %s already exists with name %s\033[0m\n" "$anstype" "$ans"
        return
    fi
    # Check $f type
    if [ -L "$f" ]; then ftype="symlink"; elif [ -d "$f" ]; then ftype="directory"; else ftype="file"; fi
    if ! error_msg="$(mv -f "$f" "$ans" 2>&1)"; then
        printf "\033[37;48;5;88m[1] $ftype %s could not be renamed - %s\033[0m\n" "$(basename "$f")" "$(echo "$error_msg" | awk -F ': ' '{print tolower($NF)}')"
    else
        printf "\033[32mRenamed $ftype %s to %s\033[0m\n" "$(basename "$f")" "$ans"
    fi
}}

# Extract the current file with the right command
# All commands skip existing files when extracting
cmd extract %{{
    ecmd=""
    case "$f" in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) ecmd="tar xjvfk '$f'";;
        *.tar.gz|*.tgz) ecmd="tar xzvfk '$f'";;
        *.tar.xz|*.txz) ecmd="tar xJvfk '$f'";;
        *.zip) ecmd="unzip -n '$f'";;
        *.rar) ecmd="unrar x -inul -o- '$f'";;
        *.7z) ecmd="7z x -aos '$f'";;
        *) printf "\033[37;48;5;88m[1] unrecognized archive type\033[0m\n"; return 1;;
    esac
    if eval "$ecmd > /dev/null 2>&1"; then
        printf "\033[32mArchive %s extracted\033[0m\n" "$(basename "$f")"
    else
        printf "\033[37;48;5;88m[1] could not extract archive %s\033[0m\n" "$(basename "$f")"
    fi
}}

# Compress selected files with zip
cmd zip %{{
    printf "Enter new archive name: "
    read ans
    if [ -z "$ans" ]; then printf "\033[37;48;5;88m[1] new name cannot be empty\033[0m\n"; return; fi
    ans="${ans%.zip}"
    # Check if a file with the same name already exists
    if [ -e "$ans.zip" ]; then printf "\033[37;48;5;88m[1] a file already exists with name %s\033[0m\n" "$ans.zip"; return; fi
    # Zip command ignores directory names
    if zip -rqj "$ans.zip" $fx >/dev/null 2>&1; then
        printf "\033[32mArchive %s created\033[0m\n" "$ans.zip"
    else
        printf "\033[37;48;5;88m[1] archive %s could not be created\n" "$ans.zip"
    fi
    lf -remote 'send unselect'
}}

# Make selected files executable
cmd chmod %{{
    success=false
    failed_items=""
    failed_cnt=0
    for file in $fx; do
        if ! chmod a+x "$file" >/dev/null 2>&1; then
            failed_cnt=$((failed_cnt+1))
            if [ -z "$failed_items" ]; then
                failed_items="$(basename "$file")"
            else
                failed_items="$failed_items, $(basename "$file")"
            fi
        else
            success=true
        fi
    done
    lf -remote 'send unselect'
    if [ $failed_cnt = 0 ]; then
        lf -remote 'send reload'
        printf "\033[32mFiles made executable\033[0m\n"
    else
        if [ $success = true ]; then lf -remote 'send reload'; fi
        printf "\033[37;48;5;88m[%d] error making files executable - %s\033[0m\n" "$failed_cnt" "$failed_items"
    fi
}}

# Open file or project in VSCode
cmd vscode %{{
    code $fx
    lf -remote 'send unselect'
    lf -remote 'send reload'
    printf "\033[32mOpened files in VSCode\033[0m\n"
}}

# Open files in Sublime
# Directories cannot be opened in Sublime
cmd sublime %{{
    filebool=false
    dircnt=0
    for file in $fx; do
        if [ -f "$file" ]; then filebool=true; subl "$file"; else dircnt=$((dircnt+1)); fi
    done
    lf -remote 'send unselect'
    if [ "$filebool" = false ]; then
        printf "\033[37;48;5;88m[%d] cannot open directories with Sublime\033[0m\n" "$dircnt"
    else
        lf -remote 'send reload'
        printf "\033[32mOpened files in Sublime\033[0m\n"
    fi
}}

# Copy path of the current dir to clipboard
cmd copydirpath %{{
    printf "$PWD" | pbcopy
    printf "\033[32mCopied %s to clipboard\033[0m\n" "$PWD"
}}

# Copy path of the selected file to clipboard
cmd copyfilepath %{{
    printf "$f" | pbcopy
    printf "\033[32mCopied %s to clipboard\033[0m\n" "$f"
}}

# Open Finder in current dir
cmd openfinder %{{
    open .
    lf -remote 'send reload'
}}

# Clear the files marked for cut/copy upon quitting
cmd on-quit clear

# Jump to file or dir in the current directory with fzf
# Hidden files are shown in the search only if LF is set to show them
cmd findhere ${{
    if [ "$lf_hidden" = "true" ]; then hidden_opt="--hidden"; else hidden_opt=""; fi
    res="$(fd --color=always -d 1 $hidden_opt |
        fzf +m --ansi -e --reverse --color "hl:-1:underline,hl+:-1:underline:reverse" \
        || return 0)"
    if [ -d "$res" ]; then cmd="cd"; else cmd="select"; fi
	lf -remote "send $id $cmd \"$res\""
}}

# Find a file recursively and jump to it
# Hidden files are shown in the search only if LF is set to show them
# The search is limited to a depth of 5 levels
cmd findfile ${{
    if [ "$lf_hidden" = "true" ]; then hidden_opt="--hidden"; else hidden_opt=""; fi
    res="$(fd --color=always -d 5 --type=file --fixed-strings $hidden_opt |
        fzf +m --ansi -e --reverse \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --preview-window 'right,45%,border-bottom,+{2}+3/3,~3' \
        --preview '~/.config/lf/preview {} ${FZF_PREVIEW_COLUMNS} ${FZF_PREVIEW_LINES}' \
        || return 0)"
	lf -remote "send $id select \"$res\""
}}

# Find a directory recursively and jump to it
# Hidden dirs are shown in the search only if LF is set to show them
cmd finddir ${{
    if [ "$lf_hidden" = "true" ]; then hidden_opt="--hidden"; else hidden_opt=""; fi
    res="$(fd --color=always -d 5 --type=directory --fixed-strings $hidden_opt |
        fzf +m --ansi -e --reverse \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --preview-window 'right,40%,border-bottom,+{2}+3/3,~3' \
        --preview 'eza --icons --color=always --group-directories-first --width ${FZF_PREVIEW_COLUMNS} {}' \
        || return 0)"
	lf -remote "send $id cd \"$res\""
}}

# Ask AI a question on the current file
# Requires fzfscripts
cmd ask_gpt ${{
    . "$HOME/.config/fzfscripts.sh"
    flines=$(crange "$f")
    if [ -n "$flines" ]; then
        printf "\n\033[1;35m╭─ Bot\n\033[0mAsk the AI a question on this file:\n\n\033[1;94m╭─ You\033[0m\n"
        read -r ans
        printf "%s" "$flines" | tgpt "$ans"
        lf -remote "send $id quit"
    fi
}}

# Open the current file with Zathura
# Must be a Markdown file
cmd zathura &{{
    pandoc -f gfm -t html5 "$f" -o ~/Documents/notes/output.pdf 2> /dev/null | zathura -
}}

# -----------------------------------------------------------
# Bindings
# -----------------------------------------------------------

# Remove default bindings
map m
map o
map n
map "'"
map '"'
map d
map c
map e
#map f
map d
map r
map v
map s
map f
map t
map w

map sn :set sortby natural; set info
map sc :set sortby ctime; set reverse; set info ctime
map ff findfile
map fd finddir
map <c-f> findhere
map <c-c> copy
map p :paste; clear
map <c-x> cut
map i invert
map d clear
map u unselect
map <c-a> glob-select *
map <a-down> half-down
map <a-up> half-up

map <esc> quit
map <enter> shell
map T trash
map D delete
map R rename
map E extract
map H ask_gpt
map P $~/.config/lf/preview $f | less -R
map nd newdir
map nf newfile
map wg download
map nr tar2
map chm chmod
map vsc vscode
map sbl sublime
map cph copyhere
map mvh movehere
map cfp copyfilepath
map cdp copydirpath
map clone clone
map fm openfinder
map . set hidden!
map fzf fzf_select
map zip zip
map zpdf zathura

# execute current file (must be executable)
map ex ${{ zsh -ic "$f || exit 0"; lf -remote "send $id quit"}}
map eX !{{ zsh -ic "$f || exit 0" }}

# Movement
map gh cd ~
map gd cd ~/Documents
map gp cd ~/Documents/projects
map gi cd ~/Pictures
map gc cd ~/.config
map gn cd ~/Documents/notes
